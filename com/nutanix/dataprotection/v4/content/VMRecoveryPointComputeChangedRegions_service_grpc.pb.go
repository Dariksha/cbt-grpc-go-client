//
// Generated file com/nutanix/dataprotection/v4/content.proto.
//
// Product version: 16.9.0-SNAPSHOT
//
// Part of the Nutanix Data Proetction gRPC APIs
//
// (c) 2024 Nutanix Inc.  All rights reserved
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: com/nutanix/dataprotection/v4/content/VMRecoveryPointComputeChangedRegions_service.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VMRecoveryPointComputeChangedRegionsService_VmRecoveryPointComputeChangedRegions_FullMethodName = "/com.nutanix.dataprotection.v4.content.VMRecoveryPointComputeChangedRegionsService/vmRecoveryPointComputeChangedRegions"
)

// VMRecoveryPointComputeChangedRegionsServiceClient is the client API for VMRecoveryPointComputeChangedRegionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMRecoveryPointComputeChangedRegionsServiceClient interface {
	// uri: /dataprotection/v4/content/recovery-points/{recoveryPointExtId}/vm-recovery-points/{vmRecoveryPointExtId}/disk-recovery-points/{extId}/$actions/compute-changed-regions
	// http method: POST
	// Changed Regions information for the regions that have changed in the right half-open interval
	// Returns information pertaining to all the regions that have changed in the right half-open interval: [start, length).
	VmRecoveryPointComputeChangedRegions(ctx context.Context, in *VmRecoveryPointComputeChangedRegionsArg, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VmRecoveryPointComputeChangedRegionsRet], error)
}

type vMRecoveryPointComputeChangedRegionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMRecoveryPointComputeChangedRegionsServiceClient(cc grpc.ClientConnInterface) VMRecoveryPointComputeChangedRegionsServiceClient {
	return &vMRecoveryPointComputeChangedRegionsServiceClient{cc}
}

func (c *vMRecoveryPointComputeChangedRegionsServiceClient) VmRecoveryPointComputeChangedRegions(ctx context.Context, in *VmRecoveryPointComputeChangedRegionsArg, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VmRecoveryPointComputeChangedRegionsRet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMRecoveryPointComputeChangedRegionsService_ServiceDesc.Streams[0], VMRecoveryPointComputeChangedRegionsService_VmRecoveryPointComputeChangedRegions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VmRecoveryPointComputeChangedRegionsArg, VmRecoveryPointComputeChangedRegionsRet]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VMRecoveryPointComputeChangedRegionsService_VmRecoveryPointComputeChangedRegionsClient = grpc.ServerStreamingClient[VmRecoveryPointComputeChangedRegionsRet]

// VMRecoveryPointComputeChangedRegionsServiceServer is the server API for VMRecoveryPointComputeChangedRegionsService service.
// All implementations must embed UnimplementedVMRecoveryPointComputeChangedRegionsServiceServer
// for forward compatibility.
type VMRecoveryPointComputeChangedRegionsServiceServer interface {
	// uri: /dataprotection/v4/content/recovery-points/{recoveryPointExtId}/vm-recovery-points/{vmRecoveryPointExtId}/disk-recovery-points/{extId}/$actions/compute-changed-regions
	// http method: POST
	// Changed Regions information for the regions that have changed in the right half-open interval
	// Returns information pertaining to all the regions that have changed in the right half-open interval: [start, length).
	VmRecoveryPointComputeChangedRegions(*VmRecoveryPointComputeChangedRegionsArg, grpc.ServerStreamingServer[VmRecoveryPointComputeChangedRegionsRet]) error
	mustEmbedUnimplementedVMRecoveryPointComputeChangedRegionsServiceServer()
}

// UnimplementedVMRecoveryPointComputeChangedRegionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVMRecoveryPointComputeChangedRegionsServiceServer struct{}

func (UnimplementedVMRecoveryPointComputeChangedRegionsServiceServer) VmRecoveryPointComputeChangedRegions(*VmRecoveryPointComputeChangedRegionsArg, grpc.ServerStreamingServer[VmRecoveryPointComputeChangedRegionsRet]) error {
	return status.Errorf(codes.Unimplemented, "method VmRecoveryPointComputeChangedRegions not implemented")
}
func (UnimplementedVMRecoveryPointComputeChangedRegionsServiceServer) mustEmbedUnimplementedVMRecoveryPointComputeChangedRegionsServiceServer() {
}
func (UnimplementedVMRecoveryPointComputeChangedRegionsServiceServer) testEmbeddedByValue() {}

// UnsafeVMRecoveryPointComputeChangedRegionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMRecoveryPointComputeChangedRegionsServiceServer will
// result in compilation errors.
type UnsafeVMRecoveryPointComputeChangedRegionsServiceServer interface {
	mustEmbedUnimplementedVMRecoveryPointComputeChangedRegionsServiceServer()
}

func RegisterVMRecoveryPointComputeChangedRegionsServiceServer(s grpc.ServiceRegistrar, srv VMRecoveryPointComputeChangedRegionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedVMRecoveryPointComputeChangedRegionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VMRecoveryPointComputeChangedRegionsService_ServiceDesc, srv)
}

func _VMRecoveryPointComputeChangedRegionsService_VmRecoveryPointComputeChangedRegions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VmRecoveryPointComputeChangedRegionsArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMRecoveryPointComputeChangedRegionsServiceServer).VmRecoveryPointComputeChangedRegions(m, &grpc.GenericServerStream[VmRecoveryPointComputeChangedRegionsArg, VmRecoveryPointComputeChangedRegionsRet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VMRecoveryPointComputeChangedRegionsService_VmRecoveryPointComputeChangedRegionsServer = grpc.ServerStreamingServer[VmRecoveryPointComputeChangedRegionsRet]

// VMRecoveryPointComputeChangedRegionsService_ServiceDesc is the grpc.ServiceDesc for VMRecoveryPointComputeChangedRegionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMRecoveryPointComputeChangedRegionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.nutanix.dataprotection.v4.content.VMRecoveryPointComputeChangedRegionsService",
	HandlerType: (*VMRecoveryPointComputeChangedRegionsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "vmRecoveryPointComputeChangedRegions",
			Handler:       _VMRecoveryPointComputeChangedRegionsService_VmRecoveryPointComputeChangedRegions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/nutanix/dataprotection/v4/content/VMRecoveryPointComputeChangedRegions_service.proto",
}
