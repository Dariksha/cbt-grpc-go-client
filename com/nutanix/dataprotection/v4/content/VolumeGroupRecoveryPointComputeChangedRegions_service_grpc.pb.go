//
// Generated file com/nutanix/dataprotection/v4/content.proto.
//
// Product version: 16.9.0-SNAPSHOT
//
// Part of the Nutanix Data Proetction gRPC APIs
//
// (c) 2024 Nutanix Inc.  All rights reserved
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: com/nutanix/dataprotection/v4/content/VolumeGroupRecoveryPointComputeChangedRegions_service.proto

package content

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VolumeGroupRecoveryPointComputeChangedRegionsService_VolumeGroupRecoveryPointComputeChangedRegions_FullMethodName = "/com.nutanix.dataprotection.v4.content.VolumeGroupRecoveryPointComputeChangedRegionsService/volumeGroupRecoveryPointComputeChangedRegions"
)

// VolumeGroupRecoveryPointComputeChangedRegionsServiceClient is the client API for VolumeGroupRecoveryPointComputeChangedRegionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolumeGroupRecoveryPointComputeChangedRegionsServiceClient interface {
	// uri: /dataprotection/v4/content/recovery-points/{recoveryPointExtId}/volume-group-recovery-points/{volumeGroupRecoveryPointExtId}/disk-recovery-points/{extId}/$actions/compute-changed-regions
	// http method: POST
	// Volume group Changed Regions information for the regions that have changed in the right half-open interval
	// Returns information pertaining to all the regions that have changed in the right half-open interval: [start, length).
	VolumeGroupRecoveryPointComputeChangedRegions(ctx context.Context, in *VolumeGroupRecoveryPointComputeChangedRegionsArg, opts ...grpc.CallOption) (*VolumeGroupRecoveryPointComputeChangedRegionsRet, error)
}

type volumeGroupRecoveryPointComputeChangedRegionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeGroupRecoveryPointComputeChangedRegionsServiceClient(cc grpc.ClientConnInterface) VolumeGroupRecoveryPointComputeChangedRegionsServiceClient {
	return &volumeGroupRecoveryPointComputeChangedRegionsServiceClient{cc}
}

func (c *volumeGroupRecoveryPointComputeChangedRegionsServiceClient) VolumeGroupRecoveryPointComputeChangedRegions(ctx context.Context, in *VolumeGroupRecoveryPointComputeChangedRegionsArg, opts ...grpc.CallOption) (*VolumeGroupRecoveryPointComputeChangedRegionsRet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeGroupRecoveryPointComputeChangedRegionsRet)
	err := c.cc.Invoke(ctx, VolumeGroupRecoveryPointComputeChangedRegionsService_VolumeGroupRecoveryPointComputeChangedRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeGroupRecoveryPointComputeChangedRegionsServiceServer is the server API for VolumeGroupRecoveryPointComputeChangedRegionsService service.
// All implementations must embed UnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer
// for forward compatibility.
type VolumeGroupRecoveryPointComputeChangedRegionsServiceServer interface {
	// uri: /dataprotection/v4/content/recovery-points/{recoveryPointExtId}/volume-group-recovery-points/{volumeGroupRecoveryPointExtId}/disk-recovery-points/{extId}/$actions/compute-changed-regions
	// http method: POST
	// Volume group Changed Regions information for the regions that have changed in the right half-open interval
	// Returns information pertaining to all the regions that have changed in the right half-open interval: [start, length).
	VolumeGroupRecoveryPointComputeChangedRegions(context.Context, *VolumeGroupRecoveryPointComputeChangedRegionsArg) (*VolumeGroupRecoveryPointComputeChangedRegionsRet, error)
	mustEmbedUnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer()
}

// UnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer struct{}

func (UnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer) VolumeGroupRecoveryPointComputeChangedRegions(context.Context, *VolumeGroupRecoveryPointComputeChangedRegionsArg) (*VolumeGroupRecoveryPointComputeChangedRegionsRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeGroupRecoveryPointComputeChangedRegions not implemented")
}
func (UnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer) mustEmbedUnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer() {
}
func (UnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer) testEmbeddedByValue() {
}

// UnsafeVolumeGroupRecoveryPointComputeChangedRegionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumeGroupRecoveryPointComputeChangedRegionsServiceServer will
// result in compilation errors.
type UnsafeVolumeGroupRecoveryPointComputeChangedRegionsServiceServer interface {
	mustEmbedUnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer()
}

func RegisterVolumeGroupRecoveryPointComputeChangedRegionsServiceServer(s grpc.ServiceRegistrar, srv VolumeGroupRecoveryPointComputeChangedRegionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedVolumeGroupRecoveryPointComputeChangedRegionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VolumeGroupRecoveryPointComputeChangedRegionsService_ServiceDesc, srv)
}

func _VolumeGroupRecoveryPointComputeChangedRegionsService_VolumeGroupRecoveryPointComputeChangedRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeGroupRecoveryPointComputeChangedRegionsArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupRecoveryPointComputeChangedRegionsServiceServer).VolumeGroupRecoveryPointComputeChangedRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolumeGroupRecoveryPointComputeChangedRegionsService_VolumeGroupRecoveryPointComputeChangedRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupRecoveryPointComputeChangedRegionsServiceServer).VolumeGroupRecoveryPointComputeChangedRegions(ctx, req.(*VolumeGroupRecoveryPointComputeChangedRegionsArg))
	}
	return interceptor(ctx, in, info, handler)
}

// VolumeGroupRecoveryPointComputeChangedRegionsService_ServiceDesc is the grpc.ServiceDesc for VolumeGroupRecoveryPointComputeChangedRegionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VolumeGroupRecoveryPointComputeChangedRegionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.nutanix.dataprotection.v4.content.VolumeGroupRecoveryPointComputeChangedRegionsService",
	HandlerType: (*VolumeGroupRecoveryPointComputeChangedRegionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "volumeGroupRecoveryPointComputeChangedRegions",
			Handler:    _VolumeGroupRecoveryPointComputeChangedRegionsService_VolumeGroupRecoveryPointComputeChangedRegions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/nutanix/dataprotection/v4/content/VolumeGroupRecoveryPointComputeChangedRegions_service.proto",
}
